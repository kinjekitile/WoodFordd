//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Woodford.Infrastructure.MyGatePaymentProcessor.MyGateEnterpriseProduction {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ePayService.cfcSoapBinding", Namespace="http://_5x0x0")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(QueryBean))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFCInvocationException))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(Map))]
    public partial class ePayService5x0x2 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback fProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback fProcessAndSettleOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAliveOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ePayService5x0x2() {
            this.Url = global::Woodford.Infrastructure.MyGatePaymentProcessor.Properties.Settings.Default.Woodford_Infrastructure_MyGatePaymentProcessor_MyGateEnterpriseProduction_ePayService_5x0x2;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event fProcessCompletedEventHandler fProcessCompleted;
        
        /// <remarks/>
        public event fProcessAndSettleCompletedEventHandler fProcessAndSettleCompleted;
        
        /// <remarks/>
        public event IsAliveCompletedEventHandler IsAliveCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://_5x0x0", ResponseNamespace="http://_5x0x0")]
        [return: System.Xml.Serialization.SoapElementAttribute("fProcessReturn")]
        public object[] fProcess(
                    string GatewayID, 
                    string MerchantID, 
                    string ApplicationID, 
                    string Action, 
                    string TransactionIndex, 
                    string Terminal, 
                    string Mode, 
                    string MerchantReference, 
                    string Amount, 
                    string Currency, 
                    string CashBackAmount, 
                    string CardType, 
                    string AccountType, 
                    string CardNumber, 
                    string CardHolder, 
                    string CVVNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string Budget, 
                    string BudgetPeriod, 
                    string AuthorisationNumber, 
                    string PIN, 
                    string DebugMode, 
                    string eCommerceIndicator, 
                    string verifiedByVisaXID, 
                    string verifiedByVisaCAFF, 
                    string secureCodeUCAF, 
                    string UCI, 
                    string IPAddress, 
                    string ShippingCountryCode, 
                    string PurchaseItemsID) {
            object[] results = this.Invoke("fProcess", new object[] {
                        GatewayID,
                        MerchantID,
                        ApplicationID,
                        Action,
                        TransactionIndex,
                        Terminal,
                        Mode,
                        MerchantReference,
                        Amount,
                        Currency,
                        CashBackAmount,
                        CardType,
                        AccountType,
                        CardNumber,
                        CardHolder,
                        CVVNumber,
                        ExpiryMonth,
                        ExpiryYear,
                        Budget,
                        BudgetPeriod,
                        AuthorisationNumber,
                        PIN,
                        DebugMode,
                        eCommerceIndicator,
                        verifiedByVisaXID,
                        verifiedByVisaCAFF,
                        secureCodeUCAF,
                        UCI,
                        IPAddress,
                        ShippingCountryCode,
                        PurchaseItemsID});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void fProcessAsync(
                    string GatewayID, 
                    string MerchantID, 
                    string ApplicationID, 
                    string Action, 
                    string TransactionIndex, 
                    string Terminal, 
                    string Mode, 
                    string MerchantReference, 
                    string Amount, 
                    string Currency, 
                    string CashBackAmount, 
                    string CardType, 
                    string AccountType, 
                    string CardNumber, 
                    string CardHolder, 
                    string CVVNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string Budget, 
                    string BudgetPeriod, 
                    string AuthorisationNumber, 
                    string PIN, 
                    string DebugMode, 
                    string eCommerceIndicator, 
                    string verifiedByVisaXID, 
                    string verifiedByVisaCAFF, 
                    string secureCodeUCAF, 
                    string UCI, 
                    string IPAddress, 
                    string ShippingCountryCode, 
                    string PurchaseItemsID) {
            this.fProcessAsync(GatewayID, MerchantID, ApplicationID, Action, TransactionIndex, Terminal, Mode, MerchantReference, Amount, Currency, CashBackAmount, CardType, AccountType, CardNumber, CardHolder, CVVNumber, ExpiryMonth, ExpiryYear, Budget, BudgetPeriod, AuthorisationNumber, PIN, DebugMode, eCommerceIndicator, verifiedByVisaXID, verifiedByVisaCAFF, secureCodeUCAF, UCI, IPAddress, ShippingCountryCode, PurchaseItemsID, null);
        }
        
        /// <remarks/>
        public void fProcessAsync(
                    string GatewayID, 
                    string MerchantID, 
                    string ApplicationID, 
                    string Action, 
                    string TransactionIndex, 
                    string Terminal, 
                    string Mode, 
                    string MerchantReference, 
                    string Amount, 
                    string Currency, 
                    string CashBackAmount, 
                    string CardType, 
                    string AccountType, 
                    string CardNumber, 
                    string CardHolder, 
                    string CVVNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string Budget, 
                    string BudgetPeriod, 
                    string AuthorisationNumber, 
                    string PIN, 
                    string DebugMode, 
                    string eCommerceIndicator, 
                    string verifiedByVisaXID, 
                    string verifiedByVisaCAFF, 
                    string secureCodeUCAF, 
                    string UCI, 
                    string IPAddress, 
                    string ShippingCountryCode, 
                    string PurchaseItemsID, 
                    object userState) {
            if ((this.fProcessOperationCompleted == null)) {
                this.fProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfProcessOperationCompleted);
            }
            this.InvokeAsync("fProcess", new object[] {
                        GatewayID,
                        MerchantID,
                        ApplicationID,
                        Action,
                        TransactionIndex,
                        Terminal,
                        Mode,
                        MerchantReference,
                        Amount,
                        Currency,
                        CashBackAmount,
                        CardType,
                        AccountType,
                        CardNumber,
                        CardHolder,
                        CVVNumber,
                        ExpiryMonth,
                        ExpiryYear,
                        Budget,
                        BudgetPeriod,
                        AuthorisationNumber,
                        PIN,
                        DebugMode,
                        eCommerceIndicator,
                        verifiedByVisaXID,
                        verifiedByVisaCAFF,
                        secureCodeUCAF,
                        UCI,
                        IPAddress,
                        ShippingCountryCode,
                        PurchaseItemsID}, this.fProcessOperationCompleted, userState);
        }
        
        private void OnfProcessOperationCompleted(object arg) {
            if ((this.fProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fProcessCompleted(this, new fProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://_5x0x0", ResponseNamespace="http://_5x0x0")]
        [return: System.Xml.Serialization.SoapElementAttribute("fProcessAndSettleReturn")]
        public object[] fProcessAndSettle(
                    string GatewayID, 
                    string MerchantID, 
                    string ApplicationID, 
                    string TransactionIndex, 
                    string Terminal, 
                    string Mode, 
                    string MerchantReference, 
                    string Amount, 
                    string Currency, 
                    string CashBackAmount, 
                    string CardType, 
                    string AccountType, 
                    string CardNumber, 
                    string CardHolder, 
                    string CVVNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string Budget, 
                    string BudgetPeriod, 
                    string AuthorisationNumber, 
                    string PIN, 
                    string DebugMode, 
                    string eCommerceIndicator, 
                    string verifiedByVisaXID, 
                    string verifiedByVisaCAFF, 
                    string secureCodeUCAF, 
                    string UCI, 
                    string IPAddress, 
                    string ShippingCountryCode, 
                    string PurchaseItemsID) {
            object[] results = this.Invoke("fProcessAndSettle", new object[] {
                        GatewayID,
                        MerchantID,
                        ApplicationID,
                        TransactionIndex,
                        Terminal,
                        Mode,
                        MerchantReference,
                        Amount,
                        Currency,
                        CashBackAmount,
                        CardType,
                        AccountType,
                        CardNumber,
                        CardHolder,
                        CVVNumber,
                        ExpiryMonth,
                        ExpiryYear,
                        Budget,
                        BudgetPeriod,
                        AuthorisationNumber,
                        PIN,
                        DebugMode,
                        eCommerceIndicator,
                        verifiedByVisaXID,
                        verifiedByVisaCAFF,
                        secureCodeUCAF,
                        UCI,
                        IPAddress,
                        ShippingCountryCode,
                        PurchaseItemsID});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void fProcessAndSettleAsync(
                    string GatewayID, 
                    string MerchantID, 
                    string ApplicationID, 
                    string TransactionIndex, 
                    string Terminal, 
                    string Mode, 
                    string MerchantReference, 
                    string Amount, 
                    string Currency, 
                    string CashBackAmount, 
                    string CardType, 
                    string AccountType, 
                    string CardNumber, 
                    string CardHolder, 
                    string CVVNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string Budget, 
                    string BudgetPeriod, 
                    string AuthorisationNumber, 
                    string PIN, 
                    string DebugMode, 
                    string eCommerceIndicator, 
                    string verifiedByVisaXID, 
                    string verifiedByVisaCAFF, 
                    string secureCodeUCAF, 
                    string UCI, 
                    string IPAddress, 
                    string ShippingCountryCode, 
                    string PurchaseItemsID) {
            this.fProcessAndSettleAsync(GatewayID, MerchantID, ApplicationID, TransactionIndex, Terminal, Mode, MerchantReference, Amount, Currency, CashBackAmount, CardType, AccountType, CardNumber, CardHolder, CVVNumber, ExpiryMonth, ExpiryYear, Budget, BudgetPeriod, AuthorisationNumber, PIN, DebugMode, eCommerceIndicator, verifiedByVisaXID, verifiedByVisaCAFF, secureCodeUCAF, UCI, IPAddress, ShippingCountryCode, PurchaseItemsID, null);
        }
        
        /// <remarks/>
        public void fProcessAndSettleAsync(
                    string GatewayID, 
                    string MerchantID, 
                    string ApplicationID, 
                    string TransactionIndex, 
                    string Terminal, 
                    string Mode, 
                    string MerchantReference, 
                    string Amount, 
                    string Currency, 
                    string CashBackAmount, 
                    string CardType, 
                    string AccountType, 
                    string CardNumber, 
                    string CardHolder, 
                    string CVVNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string Budget, 
                    string BudgetPeriod, 
                    string AuthorisationNumber, 
                    string PIN, 
                    string DebugMode, 
                    string eCommerceIndicator, 
                    string verifiedByVisaXID, 
                    string verifiedByVisaCAFF, 
                    string secureCodeUCAF, 
                    string UCI, 
                    string IPAddress, 
                    string ShippingCountryCode, 
                    string PurchaseItemsID, 
                    object userState) {
            if ((this.fProcessAndSettleOperationCompleted == null)) {
                this.fProcessAndSettleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfProcessAndSettleOperationCompleted);
            }
            this.InvokeAsync("fProcessAndSettle", new object[] {
                        GatewayID,
                        MerchantID,
                        ApplicationID,
                        TransactionIndex,
                        Terminal,
                        Mode,
                        MerchantReference,
                        Amount,
                        Currency,
                        CashBackAmount,
                        CardType,
                        AccountType,
                        CardNumber,
                        CardHolder,
                        CVVNumber,
                        ExpiryMonth,
                        ExpiryYear,
                        Budget,
                        BudgetPeriod,
                        AuthorisationNumber,
                        PIN,
                        DebugMode,
                        eCommerceIndicator,
                        verifiedByVisaXID,
                        verifiedByVisaCAFF,
                        secureCodeUCAF,
                        UCI,
                        IPAddress,
                        ShippingCountryCode,
                        PurchaseItemsID}, this.fProcessAndSettleOperationCompleted, userState);
        }
        
        private void OnfProcessAndSettleOperationCompleted(object arg) {
            if ((this.fProcessAndSettleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fProcessAndSettleCompleted(this, new fProcessAndSettleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://_5x0x0", ResponseNamespace="http://_5x0x0")]
        [return: System.Xml.Serialization.SoapElementAttribute("IsAliveReturn")]
        public double IsAlive(string strRemoteAddress, string strApplicationID) {
            object[] results = this.Invoke("IsAlive", new object[] {
                        strRemoteAddress,
                        strApplicationID});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void IsAliveAsync(string strRemoteAddress, string strApplicationID) {
            this.IsAliveAsync(strRemoteAddress, strApplicationID, null);
        }
        
        /// <remarks/>
        public void IsAliveAsync(string strRemoteAddress, string strApplicationID, object userState) {
            if ((this.IsAliveOperationCompleted == null)) {
                this.IsAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAliveOperationCompleted);
            }
            this.InvokeAsync("IsAlive", new object[] {
                        strRemoteAddress,
                        strApplicationID}, this.IsAliveOperationCompleted, userState);
        }
        
        private void OnIsAliveOperationCompleted(object arg) {
            if ((this.IsAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://rpc.xml.coldfusion")]
    public partial class QueryBean {
        
        private string[] columnListField;
        
        private object[] dataField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] columnList {
            get {
                return this.columnListField;
            }
            set {
                this.columnListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public object[] data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://rpc.xml.coldfusion")]
    public partial class CFCInvocationException {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://xml.apache.org/xml-soap")]
    public partial class Map {
        
        private mapItem[] itemField;
        
        /// <remarks/>
        public mapItem[] item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://xml.apache.org/xml-soap")]
    public partial class mapItem {
        
        private object keyField;
        
        private object valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public object key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public object value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void fProcessCompletedEventHandler(object sender, fProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void fProcessAndSettleCompletedEventHandler(object sender, fProcessAndSettleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fProcessAndSettleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fProcessAndSettleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void IsAliveCompletedEventHandler(object sender, IsAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591