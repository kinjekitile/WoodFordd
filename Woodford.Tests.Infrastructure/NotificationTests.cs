using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Woodford.Core.ApplicationServices.Commands.Vouchers;
using Woodford.Core.DomainModel.Enums;
using Woodford.Core.DomainModel.Models;
using Woodford.Core.Interfaces;
using Woodford.Core.Interfaces.Facades;
using Woodford.Core.Interfaces.Providers;
using Woodford.UI.Web.Admin.Code.Helpers;

namespace Woodford.Tests.Infrastructure {
    [TestClass]
    public class NotificationTests : TestBase {

        [TestMethod]
        public void SendAvanceReport() {
            INotificationBuilder _notifyBuilder = _container.GetInstance<INotificationBuilder>();
            INotify _notify = _container.GetInstance<INotify>();
            IUserService _userService = _container.GetInstance<IUserService>();
            var user = _userService.GetById(15);
            var newsAndCampaigns = _notifyBuilder.BuildNewsAndCampaignItems();
            AdvanceReportNotificationModel emailModel = _notifyBuilder.BuildLoyaltyReport(user, newsAndCampaigns);
            _notify.SendNotifyLoyaltyMontlyReport(emailModel, Setting.Public_Website_Domain);

        }

        [TestMethod]
        public void SendVoucherNotification() {
            VoucherEmailToUserCommand sendVoucher = new VoucherEmailToUserCommand();
            sendVoucher.VoucherId = 13; //Redeemed
            sendVoucher.VoucherId = 18; //OK
            sendVoucher.Email = "oshepherd@gmail.com";
            sendVoucher.CustomerName = "Oliver";

            _command.Submit(sendVoucher);
        }

    
        [TestMethod]
        public void SendUserSignUpNotification() {
            INotify notify = _container.GetInstance<INotify>();
            IReservationService _reservationService = _container.GetInstance<IReservationService>();
            IInvoiceService invoiceService = _container.GetInstance<IInvoiceService>();
            IUserService userService = _container.GetInstance<IUserService>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();

            var user = userService.GetById(15);

            UserRegistrationNotifcationModel emailModel = new UserRegistrationNotifcationModel();
            emailModel.User = user;

            //emailModel.User.Email = "oliver@longviewafrica.com";
            emailModel.User.Email = "essa@woodford.co.za";

            notify.SendNotifyAccountCreated(emailModel, Setting.Public_Website_Domain);
        }

        [TestMethod]
        public void SendAdminUserCreateNotification() {
            INotify notify = _container.GetInstance<INotify>();
            IReservationService _reservationService = _container.GetInstance<IReservationService>();
            IInvoiceService invoiceService = _container.GetInstance<IInvoiceService>();
            IUserService userService = _container.GetInstance<IUserService>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();

            var user = userService.GetById(15);

            UserRegistrationNotifcationModel emailModel = new UserRegistrationNotifcationModel();
            emailModel.User = user;
            emailModel.IsAdminGenerated = true;
            emailModel.HasAutoGeneratedPassword = true;
            emailModel.AutoGeneratedPassword = "asdasdd";
            //emailModel.User.Email = "oliver@longviewafrica.com";
            emailModel.User.Email = "essa@woodford.co.za";

            notify.SendNotifyAccountCreated(emailModel, Setting.Public_Website_Domain);
        }




        [TestMethod]
        public void SendLoyaltyRegisterNotification() {

            INotify notify = _container.GetInstance<INotify>();
            IReservationService _reservationService = _container.GetInstance<IReservationService>();
            IInvoiceService invoiceService = _container.GetInstance<IInvoiceService>();
            IUserService userService = _container.GetInstance<IUserService>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();

            var user = userService.GetById(15);

            UserRegistrationNotifcationModel emailModel = new UserRegistrationNotifcationModel();
            emailModel.User = user;

            emailModel.HasAutoGeneratedPassword = false;
            emailModel.IsAdminGenerated = false;

            //emailModel.User.Email = "oliver@longviewafrica.com";
            emailModel.User.Email = "essa@woodford.co.za";

            notify.SendNotifyLoyaltyAccountCreatedByAdmin(emailModel, Setting.Public_Website_Domain);
        }

        [TestMethod]
        public void SendPointsEarnedNotification() {
            INotify notify = _container.GetInstance<INotify>();
            IReservationService _reservationService = _container.GetInstance<IReservationService>();
            IInvoiceService invoiceService = _container.GetInstance<IInvoiceService>();
            IUserService userService = _container.GetInstance<IUserService>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();

            LoyaltyPointsEarnedNotificationModel emailModel = new LoyaltyPointsEarnedNotificationModel();

            BookingHistoryModel history = new BookingHistoryModel();
            history.PickupDate = DateTime.Today.AddDays(-7);
            history.DropOffDate = history.PickupDate.AddDays(3);
            history.PickupBranch = new BranchModel { Title = "King Shaka International" };
            history.UserId = 15;
            history.LoyaltyPointsEarned = 30;

            emailModel = notificationBuilder.BuildLoyaltyPointsEarnedModel(history);
            //emailModel.User.Email = "oliver@longviewafrica.com";
            emailModel.User.Email = "essa@woodford.co.za";



            notify.SendNotifyLoyaltyPointsEarned(emailModel, Setting.Public_Website_Domain);
        }


        [TestMethod]
        public void SendPointsSpentNotification() {
            INotify notify = _container.GetInstance<INotify>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();


            LoyaltyPointsSpentNotificationModel emailModel = new LoyaltyPointsSpentNotificationModel();
            //213
            emailModel = notificationBuilder.BuildLoyaltyPointsSpentModel(174);

            //emailModel.User.Email = "oliver@longviewafrica.com";

            emailModel.User.Email = "essa@woodford.co.za";

            //notify.SendNotifyLoyaltyPointsSpentSMS(emailModel, Setting.Public_Website_Domain);
            notify.SendNotifyLoyaltyPointsSpent(emailModel, Setting.Public_Website_Domain);
        }





        [TestMethod]
        public void SendInvoiceEmail()
        {
            INotify notify = _container.GetInstance<INotify>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();

            
            ReservationInvoiceNotificationModel emailModel = new ReservationInvoiceNotificationModel();
            emailModel = notificationBuilder.BuildReservationInvoiceModel(271);
            //emailModel.Reservation.Email = "oliver@longviewafrica.com";
            emailModel.Reservation.Email = "essa@woodford.co.za";
            emailModel.User.Email = emailModel.Reservation.Email;
            notify.SendNotifyReservationInvoice(emailModel, Setting.Public_Website_Domain);
        }


        [TestMethod]
        public void SendInvoiceReminderEmail() {
            INotify notify = _container.GetInstance<INotify>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();


            ReservationInvoiceNotificationModel emailModel = new ReservationInvoiceNotificationModel();
            emailModel = notificationBuilder.BuildReservationReminderModel(237);
            emailModel.Reservation.Email = "oliver@longviewafrica.com";
            //emailModel.Reservation.Email = "essa@woodford.co.za";
            emailModel.Reservation.PickupDate = DateTime.Now.AddHours(2);
            emailModel.Reservation.DropOffDate = emailModel.Reservation.PickupDate.AddDays(3);
            notify.SendNotifyReservationReminder(emailModel, Setting.Public_Website_Domain);
        }

        [TestMethod]
        public void SendThankYouNotification() {
            INotify notify = _container.GetInstance<INotify>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();


            ReservationInvoiceNotificationModel emailModel = new ReservationInvoiceNotificationModel();
            emailModel = notificationBuilder.BuildReservationThankYouModel(222);
            emailModel.User.Email = "oliver@longviewafrica.com";
            //emailModel.User.Email = "essa@woodford.co.za";
            emailModel.Reservation.Email = "oliver@longviewafrica.com";
            //emailModel.Reservation.Email = "essa@woodford.co.za";
            emailModel.ShowReviewSection = true;
            emailModel.ReviewUrl = "nothing";

            notify.SendNotifyReservationThanks(emailModel, Setting.Public_Website_Domain);

        }




        [TestMethod]
        public void SendQuoteReminder() {
            INotify notify = _container.GetInstance<INotify>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();


            ReservationInvoiceNotificationModel emailModel = new ReservationInvoiceNotificationModel();
            emailModel = notificationBuilder.BuildReservationInvoiceModel(253);
            emailModel.Reservation.Email = "oliver@longviewafrica.com";
            emailModel.Reservation.Email = "essa@woodford.co.za";
            //emailModel.User.Email = emailModel.Reservation.Email;
            emailModel.IsQuoteReminder = true;
            notify.SendNotifyReservationQuote(emailModel, Setting.Public_Website_Domain);
        }

        [TestMethod]
        public void SendInvoiceQuote() {
            INotify notify = _container.GetInstance<INotify>();
            INotificationBuilder notificationBuilder = _container.GetInstance<INotificationBuilder>();


            ReservationInvoiceNotificationModel emailModel = new ReservationInvoiceNotificationModel();
            emailModel = notificationBuilder.BuildReservationInvoiceModel(237);
            emailModel.Reservation.Email = "oliver@longviewafrica.com";
            emailModel.Reservation.Email = "essa@woodford.co.za";
            emailModel.User.Email = emailModel.Reservation.Email;
            notify.SendNotifyReservationQuote(emailModel, Setting.Public_Website_Domain);
        }








        [TestMethod]
        public void SendReservationCancel() {
            IReservationService reservations = _container.GetInstance<IReservationService>();
            INotify notify = _container.GetInstance<INotify>();

            var reservation = reservations.GetById(274);
            ReservationInvoiceNotificationModel model = new ReservationInvoiceNotificationModel();
            model.Reservation = reservation;
            model.CancellationFee = 250m;
            model.RefundedAmount = 100m;

            notify.SendNotifyUserOfReservationCancel(model, Setting.Public_Website_Domain);
            notify.SendNotifyAdminOfReservationCancel(model, Setting.Public_Website_Domain);



        }


        [TestMethod]
        public void SendReservationCancelSMS() {
            IReservationService reservations = _container.GetInstance<IReservationService>();
            INotify notify = _container.GetInstance<INotify>();

            var reservation = reservations.GetById(281);
            ReservationInvoiceNotificationModel model = new ReservationInvoiceNotificationModel();
            model.Reservation = reservation;
            model.CancellationFee = 250m;
            model.RefundedAmount = 100m;
            //model.Reservation.MobileNumber = "0719180480";


            notify.SendNotifyReservationCancelledSMS(model);

        }





        [TestMethod]
        public void SendAdvanceReport() {
            INotificationBuilder _notifyBuilder = _container.GetInstance<INotificationBuilder>();
            INotify _notify = _container.GetInstance<INotify>();
            IUserService _userService = _container.GetInstance<IUserService>();
            var user = _userService.GetById(15);
            var newsAndCampaigns = _notifyBuilder.BuildNewsAndCampaignItems();

            var model = _notifyBuilder.BuildLoyaltyReport(user, newsAndCampaigns);
            _notify.SendNotifyLoyaltyReport(model, Setting.Public_Website_Domain);
            
        }






        [TestMethod]
        public void GetWeatherInfoForReservation() {
            IWeatherService weather = _container.GetInstance<IWeatherService>();

            var result = weather.GetWeatherForPickupLocation(1);

        }



        [TestMethod]
        public void RervationsWithThankYous() {
            INotify notify = _container.GetInstance<INotify>();
            IReservationService reservationService = _container.GetInstance<IReservationService>();
            ISettingService settings = _container.GetInstance<ISettingService>();
            IInvoiceService invoiceService = _container.GetInstance<IInvoiceService>();
            IUserService userService = _container.GetInstance<IUserService>();

           var reservations = reservationService.Get(new ReservationFilterModel { DropOffDate = DateTime.Today.AddDays(-1 * 1).Date, ReservationState = ReservationState.Completed, ThankYouSent = false }, null).Items;
            int x = 3;
            x++;
        }

        [TestMethod]
        public void VoucherLayout() {
            IVoucherService _voucherService = _container.GetInstance<IVoucherService>();
            ISettingService _settings = _container.GetInstance<ISettingService>();
            string templatePath = _settings.GetValue<string>(Setting.VoucherTemplateLocation);
            var voucher = new VoucherModel { Id = 999, ClientEmail = "oshepherd@gmail.com", ClientName = "Oliver", VoucherNumber = "0TDUUXMUXP", VoucherRewardType = VoucherRewardType.DiscountPercentage, VoucherDiscountPercentage = 10 };
           var bytes = _voucherService.GeneratorVoucherImage(voucher, templatePath);

          

            using (Image image = Image.FromStream(new MemoryStream(bytes))) {
                image.Save("c:\\temp\\999.jpg", ImageFormat.Jpeg);  // Or Png
            }
        }

        [TestMethod]
        public void TestQuotesToBeReminded() {
            IReservationService reservationService = _container.GetInstance<IReservationService>();

            var items = reservationService.Get(new ReservationFilterModel {  QuoteHasBeenEmailed = true, QuoteDateSent = DateTime.Today, QuoteReminderSent = false, IsQuote = true }, null).Items;

            int x = 3;
            x++;

        }

        [TestMethod]
        public void SendSMS() {
            INotify notify = _container.GetInstance<INotify>();
            IReservationService _reservationService = _container.GetInstance<IReservationService>();
            IInvoiceService invoiceService = _container.GetInstance<IInvoiceService>();

            var reservation = _reservationService.GetById(128);
            ReservationInvoiceNotificationModel emailModel = new ReservationInvoiceNotificationModel();
            emailModel.Reservation = reservation;
            emailModel.Invoice = invoiceService.GetByReservationId(reservation.Id);
            notify.SendNotifyReservationInvoiceSMS(emailModel);
        }

    }
}
